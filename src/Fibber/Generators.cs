/* Copyright (c) BeyondTheDuck 2014 */
using System;
using System.Text;
using System.Threading;

namespace Fibber
{
    /// <summary>
    /// Helper class for generating standard values.
    /// </summary>
    public class Generators : IDisposable
    {
        internal static int? SeedValue = null;

        private Generators() { }

        private static readonly Generators Instance = new Generators();

        /// <summary>
        /// The current instance of the StandardGenerators class.
        /// </summary>
        public static Generators Current
        {
            get { return Instance; }
        }

        private ThreadLocal<Random> _randomGen = new ThreadLocal<Random>(() => SeedValue.HasValue ? new Random(SeedValue.Value) : new Random());

        private Lazy<string[]> _alphabet = new Lazy<string[]>(() =>
        {
            return new string[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " " };
        });

        /// <summary>
        /// Generate a random bool.
        /// </summary>
        /// <returns>A randomly generated bool.</returns>
        public bool Bool()
        {
            return Convert.ToBoolean(_randomGen.Value.Next(2));
        }

        /// <summary>
        /// Generates a random byte.
        /// </summary>
        /// <returns>A randomly generated byte.</returns>
        public byte Byte()
        {
            var returnValue = this.ByteArray(1);

            return returnValue[0];
        }

        /// <summary>
        /// Generates a random byte array of a randomly chosen size.
        /// </summary>
        /// <returns>A byte[] with randomly generated values and randomly chosen size that is equal to or greater than 1 and less than the 128.</returns>
        public byte[] ByteArray()
        {
            var size = _randomGen.Value.Next(1, 128);
            var returnValue = new byte[size];

            _randomGen.Value.NextBytes(returnValue);

            return returnValue;
        }

        /// <summary>
        /// Generates a random byte array.
        /// </summary>
        /// <param name="arraySize">Size of the byte array to return.</param>
        /// <returns>A byte[] with randomly generated values.</returns>
        public byte[] ByteArray(int arraySize)
        {
            if (arraySize <= 0) { throw new ArgumentException("The parameter arraySize must be greater than 0.", "arraySize"); }

            var returnValue = new byte[arraySize];

            _randomGen.Value.NextBytes(returnValue);

            return returnValue;
        }

        /// <summary>
        /// Generates a random byte array with a size that is equal to or greater than the minSize and less than the maxSize.
        /// </summary>
        /// <param name="minArraySize">The minimum size of the byte array to return.</param>
        /// <param name="maxArraySize">The maximum size of the byte array to return.</param>
        /// <returns>A byte[] with randomly generated values.</returns>
        public byte[] ByteArray(int minArraySize, int maxArraySize)
        {
            if (minArraySize < 0) { throw new ArgumentException("The parameter minArraySize must be greater than or equal to 0.", "minArraySize"); }
            if (minArraySize >= maxArraySize) { throw new ArgumentException("The minArraySize parameter cannot be greater than or equal to the maxArraySize parameter.", "minArraySize"); }

            var size = _randomGen.Value.Next(minArraySize, maxArraySize);
            var returnValue = new byte[size];

            _randomGen.Value.NextBytes(returnValue);

            return returnValue;
        }

        /// <summary>
        /// Generate a random decimal.
        /// </summary>
        /// <returns>A randomly generated, positive decimal</returns>
        public decimal Decimal()
        {
            byte scale = (byte)_randomGen.Value.Next(29);
            bool sign = _randomGen.Value.Next(2) == 1;
            var returnValue = new decimal(_randomGen.Value.Next(), _randomGen.Value.Next(), _randomGen.Value.Next(), sign, scale);

            return Math.Abs(returnValue);
        }

        /// <summary>
        /// Generate a random float.
        /// </summary>
        /// <returns>A randomly generated float. </returns>
        public float Float()
        {
            var returnValue = ((float)_randomGen.Value.Next() / 2147483648);

            return returnValue;
        }

        /// <summary>
        /// Generate a random int.
        /// </summary>
        /// <returns>A randomly generated, positive int. </returns>
        public int Int()
        {
            return Int(0, Int32.MaxValue);
        }

        /// <summary>
        /// Generate a random int. The random number generated can include the minValue but will always be less than the maxValue.
        /// </summary>
        /// <param name="minValue">The minimum value for the return value.</param>
        /// <param name="maxValue">The maximum value for the return value.</param>
        /// <returns>A randomly generated, positive int greater than and including the minValue and less than the maxValue.</returns>
        public int Int(int minValue, int maxValue)
        {
            if (minValue < 0) { throw new ArgumentException("The parameter minValue must be greater than or equal to 0.", "minValue"); }
            if (minValue >= maxValue) { throw new ArgumentException("The minValue parameter cannot be greater than or equal to the maxValue parameter.", "minValue"); }

            return _randomGen.Value.Next(minValue, maxValue);
        }

        /// <summary>
        /// Generate a random Int64.
        /// </summary>
        /// <returns>A randomly generated, positive Int64. </returns>
        public Int64 Int64()
        {
            var result = new byte[sizeof(Int64)];

            _randomGen.Value.NextBytes(result);

            var returnValue = Math.Abs(BitConverter.ToInt64(result, 0));

            return returnValue;
        }

        /// <summary>
        /// Generate a random short.
        /// </summary>
        /// <returns>A randomly generated, positive short. </returns>
        public Int16 Int16()
        {
            var result = new byte[sizeof(Int16)];

            _randomGen.Value.NextBytes(result);

            var returnValue = Math.Abs(BitConverter.ToInt16(result, 0));

            return returnValue;
        }

        /// <summary>
        /// Generate a random string of a randomly chosen length.
        /// </summary>
        /// <returns>A randomly generated string of a randomly chosen length that is equal to or greater than 10 and less than the 300; including spaces.</returns>
        public string String()
        {
            return this.String(10, 300, true);
        }

        /// <summary>
        /// Generate a random string with a length that is equal to or greater than the minLength and less than the maxLength.
        /// </summary>
        /// <param name="minLength">The minimum length of the generated string.</param>
        /// <param name="maxLength">The maximum length of the generated string.</param>
        /// <param name="includeSpaces">Include spaces in the generated string.</param>
        /// <returns>A randomly generated string with a length that is equal to or greater than the minLength and less than the maxLength.</returns>
        public string String(int minLength, int maxLength, bool includeSpaces)
        {
            if (minLength < 0) { throw new ArgumentException("The parameter minLength must be greater than or equal to 0.", "minLength"); }
            if (minLength >= maxLength) { throw new ArgumentException("The minLength parameter cannot be greater than or equal to the maxLength parameter.", "minLength"); }

            var returnValue = new StringBuilder();
            var alphabetRange = includeSpaces ? 64 : 52;

            var length = _randomGen.Value.Next(minLength, maxLength);

            for (int i = 0; i < length; i++)
            {
                returnValue.Append(_alphabet.Value[Convert.ToInt32(Math.Floor(alphabetRange * _randomGen.Value.NextDouble()))]);
            }

            return returnValue.ToString();
        }

        #region IDisposable Members

        /// <summary>
        /// Dispose.
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Dispose.
        /// </summary>
        /// <param name="disposing">Disposing.</param>
        protected virtual void Dispose(bool disposing)
        {
            if (_randomGen.IsValueCreated && _randomGen.Value != null)
            {
                _randomGen.Dispose();
            }
        }

        #endregion
    }
}
